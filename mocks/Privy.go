// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	request "bitbucket.org/kawancicil/core-library/external/privy/request"

	response "bitbucket.org/kawancicil/core-library/external/privy/response"
)

// Privy is an autogenerated mock type for the Privy type
type Privy struct {
	mock.Mock
}

// Registration provides a mock function with given fields: in, merchantKey, privyUrl, privyUserName, privyPassword
func (_m *Privy) Registration(in request.RegisterPrivyRequest, merchantKey string, privyUrl string, privyUserName string, privyPassword string) (response.PrivyAPIResponse, error) {
	ret := _m.Called(in, merchantKey, privyUrl, privyUserName, privyPassword)

	var r0 response.PrivyAPIResponse
	if rf, ok := ret.Get(0).(func(request.RegisterPrivyRequest, string, string, string, string) response.PrivyAPIResponse); ok {
		r0 = rf(in, merchantKey, privyUrl, privyUserName, privyPassword)
	} else {
		r0 = ret.Get(0).(response.PrivyAPIResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.RegisterPrivyRequest, string, string, string, string) error); ok {
		r1 = rf(in, merchantKey, privyUrl, privyUserName, privyPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadDocumentToPrivy provides a mock function with given fields: in, merchantKey, privyUrl, privyUserName, privyPassword
func (_m *Privy) UploadDocumentToPrivy(in request.UploadDocumentPrivyRequest, merchantKey string, privyUrl string, privyUserName string, privyPassword string) (response.PrivyAPIResponse, error) {
	ret := _m.Called(in, merchantKey, privyUrl, privyUserName, privyPassword)

	var r0 response.PrivyAPIResponse
	if rf, ok := ret.Get(0).(func(request.UploadDocumentPrivyRequest, string, string, string, string) response.PrivyAPIResponse); ok {
		r0 = rf(in, merchantKey, privyUrl, privyUserName, privyPassword)
	} else {
		r0 = ret.Get(0).(response.PrivyAPIResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.UploadDocumentPrivyRequest, string, string, string, string) error); ok {
		r1 = rf(in, merchantKey, privyUrl, privyUserName, privyPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
