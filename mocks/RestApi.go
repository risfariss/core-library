// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	http "net/http"

	rest_api "bitbucket.org/kawancicil/core-library/rest_api"
	mock "github.com/stretchr/testify/mock"
)

// RestApi is an autogenerated mock type for the RestApi type
type RestApi struct {
	mock.Mock
}

// GenerateBearerToken provides a mock function with given fields: in, clientId, clientSecret, grantType, provisionKey, tokenURL
func (_m *RestApi) GenerateBearerToken(in string, clientId string, clientSecret string, grantType string, provisionKey string, tokenURL string) (string, error) {
	ret := _m.Called(in, clientId, clientSecret, grantType, provisionKey, tokenURL)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) string); ok {
		r0 = rf(in, clientId, clientSecret, grantType, provisionKey, tokenURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(in, clientId, clientSecret, grantType, provisionKey, tokenURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HitApiService provides a mock function with given fields: httpMethod, params
func (_m *RestApi) HitApiService(httpMethod string, params rest_api.Params) (map[string]interface{}, error) {
	ret := _m.Called(httpMethod, params)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, rest_api.Params) map[string]interface{}); ok {
		r0 = rf(httpMethod, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, rest_api.Params) error); ok {
		r1 = rf(httpMethod, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HitApiServiceParam provides a mock function with given fields: httpMethod, params
func (_m *RestApi) HitApiServiceParam(httpMethod string, params rest_api.Params) ([]byte, http.Header, error) {
	ret := _m.Called(httpMethod, params)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, rest_api.Params) []byte); ok {
		r0 = rf(httpMethod, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 http.Header
	if rf, ok := ret.Get(1).(func(string, rest_api.Params) http.Header); ok {
		r1 = rf(httpMethod, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(http.Header)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, rest_api.Params) error); ok {
		r2 = rf(httpMethod, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// HitApiServiceWithoutBasicAuth provides a mock function with given fields: httpMethod, params
func (_m *RestApi) HitApiServiceWithoutBasicAuth(httpMethod string, params rest_api.Params) (map[string]interface{}, error) {
	ret := _m.Called(httpMethod, params)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, rest_api.Params) map[string]interface{}); ok {
		r0 = rf(httpMethod, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, rest_api.Params) error); ok {
		r1 = rf(httpMethod, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HitApiServiceWithoutBasicAuthSingleResponse provides a mock function with given fields: httpMethod, params
func (_m *RestApi) HitApiServiceWithoutBasicAuthSingleResponse(httpMethod string, params rest_api.Params) (string, error) {
	ret := _m.Called(httpMethod, params)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, rest_api.Params) string); ok {
		r0 = rf(httpMethod, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, rest_api.Params) error); ok {
		r1 = rf(httpMethod, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
