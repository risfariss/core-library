// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	logger "bitbucket.org/kawancicil/core-library/logger"
	amqp "github.com/streadway/amqp"
	mock "github.com/stretchr/testify/mock"
)

// RabbitMQ is an autogenerated mock type for the RabbitMQ type
type RabbitMQ struct {
	mock.Mock
}

// PublishLogger provides a mock function with given fields: dialUrl, payload
func (_m *RabbitMQ) PublishLogger(dialUrl string, payload logger.LoggerPayload) {
	_m.Called(dialUrl, payload)
}

// closeConnectionRabbitMQ provides a mock function with given fields: connection
func (_m *RabbitMQ) closeConnectionRabbitMQ(connection *amqp.Connection) {
	_m.Called(connection)
}

// failOnError provides a mock function with given fields: connection, err, msg
func (_m *RabbitMQ) failOnError(connection *amqp.Connection, err error, msg string) {
	_m.Called(connection, err, msg)
}

// openConnectionRabbitMQ provides a mock function with given fields: dialUrl
func (_m *RabbitMQ) openConnectionRabbitMQ(dialUrl string) (*amqp.Connection, error) {
	ret := _m.Called(dialUrl)

	var r0 *amqp.Connection
	if rf, ok := ret.Get(0).(func(string) *amqp.Connection); ok {
		r0 = rf(dialUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amqp.Connection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dialUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
