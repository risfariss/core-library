// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Common is an autogenerated mock type for the Common type
type Common struct {
	mock.Mock
}

// CheckIsNumber provides a mock function with given fields: in
func (_m *Common) CheckIsNumber(in string) bool {
	ret := _m.Called(in)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DateConvertFromUnixToTime provides a mock function with given fields: unix
func (_m *Common) DateConvertFromUnixToTime(unix int64) time.Time {
	ret := _m.Called(unix)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(int64) time.Time); ok {
		r0 = rf(unix)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// DateConverterFormatYYMMDD provides a mock function with given fields: dateUnix
func (_m *Common) DateConverterFormatYYMMDD(dateUnix int64) string {
	ret := _m.Called(dateUnix)

	var r0 string
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(dateUnix)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DateConverterFromStringFormatDDmmYYToTime provides a mock function with given fields: dateString
func (_m *Common) DateConverterFromStringFormatDDmmYYToTime(dateString string) time.Time {
	ret := _m.Called(dateString)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(dateString)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// DateConverterFromStringFormatYYmmDDToTime provides a mock function with given fields: dateString
func (_m *Common) DateConverterFromStringFormatYYmmDDToTime(dateString string) time.Time {
	ret := _m.Called(dateString)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(dateString)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// DateConverterFromTimeFormatYYMMDD provides a mock function with given fields: _a0
func (_m *Common) DateConverterFromTimeFormatYYMMDD(_a0 time.Time) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DateDiff provides a mock function with given fields: firstDate, secondDate
func (_m *Common) DateDiff(firstDate time.Time, secondDate time.Time) int {
	ret := _m.Called(firstDate, secondDate)

	var r0 int
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) int); ok {
		r0 = rf(firstDate, secondDate)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// FormatCommas provides a mock function with given fields: num
func (_m *Common) FormatCommas(num string) string {
	ret := _m.Called(num)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(num)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetAge provides a mock function with given fields: dateOfBirth
func (_m *Common) GetAge(dateOfBirth int64) string {
	ret := _m.Called(dateOfBirth)

	var r0 string
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(dateOfBirth)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetDateTimeStart provides a mock function with given fields: date
func (_m *Common) GetDateTimeStart(date int64) time.Time {
	ret := _m.Called(date)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(int64) time.Time); ok {
		r0 = rf(date)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetDayInBahasa provides a mock function with given fields: dateTimestamp
func (_m *Common) GetDayInBahasa(dateTimestamp int64) string {
	ret := _m.Called(dateTimestamp)

	var r0 string
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(dateTimestamp)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsValidEmail provides a mock function with given fields: in
func (_m *Common) IsValidEmail(in string) (bool, error) {
	ret := _m.Called(in)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsValidPhoneNumber provides a mock function with given fields: in
func (_m *Common) IsValidPhoneNumber(in string) (string, error) {
	ret := _m.Called(in)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimestampToDateInBahasa provides a mock function with given fields: dateTimestamp, separator
func (_m *Common) TimestampToDateInBahasa(dateTimestamp int64, separator string) string {
	ret := _m.Called(dateTimestamp, separator)

	var r0 string
	if rf, ok := ret.Get(0).(func(int64, string) string); ok {
		r0 = rf(dateTimestamp, separator)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ValidatePhoneNumber provides a mock function with given fields: phoneNumber
func (_m *Common) ValidatePhoneNumber(phoneNumber string) string {
	ret := _m.Called(phoneNumber)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(phoneNumber)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
